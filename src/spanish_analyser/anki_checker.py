#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Anki
"""

import os
import sys
import subprocess
import platform
from typing import List, Optional

class AnkiChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Anki"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.anki_process_names = self._get_anki_process_names()
    
    def _get_anki_process_names(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Anki –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°"""
        if self.system == "darwin":  # macOS
            return ["Anki", "anki", "Anki.app"]
        elif self.system == "windows":
            return ["anki.exe", "Anki.exe", "anki"]
        elif self.system == "linux":
            return ["anki", "Anki", "anki-bin"]
        else:
            return ["anki", "Anki"]
    
    def is_anki_running(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Anki
        
        Returns:
            bool: True –µ—Å–ª–∏ Anki –∑–∞–ø—É—â–µ–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            if self.system == "darwin":  # macOS
                return self._check_macos_anki()
            elif self.system == "windows":
                return self._check_windows_anki()
            elif self.system == "linux":
                return self._check_linux_anki()
            else:
                return self._check_generic_anki()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Anki: {e}")
            return False
    
    def _check_macos_anki(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Anki –Ω–∞ macOS"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ps –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            result = subprocess.run(
                ["ps", "aux"], 
                capture_output=True, 
                text=True, 
                check=True
            )
            
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Anki
            for line in result.stdout.split('\n'):
                if any(name in line for name in self.anki_process_names):
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if "anki_checker" not in line and "python" not in line:
                        return True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Activity Monitor
            try:
                result = subprocess.run(
                    ["pgrep", "-f", "Anki"], 
                    capture_output=True, 
                    text=True
                )
                if result.stdout.strip():
                    return True
            except:
                pass
                
            return False
            
        except subprocess.CalledProcessError:
            return False
    
    def _check_windows_anki(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Anki –Ω–∞ Windows"""
        try:
            result = subprocess.run(
                ["tasklist", "/FI", "IMAGENAME eq anki.exe"], 
                capture_output=True, 
                text=True, 
                check=True
            )
            
            # –ï—Å–ª–∏ –≤ –≤—ã–≤–æ–¥–µ –µ—Å—Ç—å "anki.exe", –∑–Ω–∞—á–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
            return "anki.exe" in result.stdout.lower()
            
        except subprocess.CalledProcessError:
            return False
    
    def _check_linux_anki(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Anki –Ω–∞ Linux"""
        try:
            result = subprocess.run(
                ["pgrep", "-f", "anki"], 
                capture_output=True, 
                text=True
            )
            
            return bool(result.stdout.strip())
            
        except subprocess.CalledProcessError:
            return False
    
    def _check_generic_anki(self) -> bool:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Anki"""
        try:
            if self.system == "darwin":
                result = subprocess.run(["ps", "aux"], capture_output=True, text=True)
            else:
                result = subprocess.run(["ps", "aux"], capture_output=True, text=True)
            
            return any(name in result.stdout for name in self.anki_process_names)
            
        except subprocess.CalledProcessError:
            return False
    
    def get_anki_processes(self) -> List[dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Anki —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        
        Returns:
            List[dict]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
        """
        processes = []
        
        try:
            if self.system == "darwin":  # macOS
                result = subprocess.run(
                    ["ps", "aux"], 
                    capture_output=True, 
                    text=True, 
                    check=True
                )
                
                for line in result.stdout.split('\n'):
                    if any(name in line for name in self.anki_process_names):
                        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É ps aux
                        parts = line.split()
                        if len(parts) >= 11:
                            process_info = {
                                'pid': parts[1],
                                'cpu': parts[2],
                                'mem': parts[3],
                                'command': ' '.join(parts[10:])
                            }
                            processes.append(process_info)
            
            elif self.system == "windows":
                result = subprocess.run(
                    ["tasklist", "/FI", "IMAGENAME eq anki.exe", "/FO", "CSV"], 
                    capture_output=True, 
                    text=True, 
                    check=True
                )
                
                for line in result.stdout.split('\n')[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    if line.strip() and "anki.exe" in line.lower():
                        parts = line.split(',')
                        if len(parts) >= 5:
                            process_info = {
                                'pid': parts[1].strip('"'),
                                'mem': parts[4].strip('"'),
                                'command': parts[0].strip('"')
                            }
                            processes.append(process_info)
            
            elif self.system == "linux":
                result = subprocess.run(
                    ["ps", "aux"], 
                    capture_output=True, 
                    text=True, 
                    check=True
                )
                
                for line in result.stdout.split('\n'):
                    if any(name in line for name in self.anki_process_names):
                        parts = line.split()
                        if len(parts) >= 11:
                            process_info = {
                                'pid': parts[1],
                                'cpu': parts[2],
                                'mem': parts[3],
                                'command': ' '.join(parts[10:])
                            }
                            processes.append(process_info)
        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        
        return processes
    
    def wait_for_anki_to_close(self, timeout: int = 300) -> bool:
        """
        –ñ–¥—ë—Ç, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä–æ–µ—Ç Anki
        
        Args:
            timeout (int): –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
            
        Returns:
            bool: True –µ—Å–ª–∏ Anki –∑–∞–∫—Ä—ã—Ç–æ, False –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç
        """
        import time
        
        print(f"‚è≥ –û–∂–∏–¥–∞—é –∑–∞–∫—Ä—ã—Ç–∏—è Anki (—Ç–∞–π–º–∞—É—Ç: {timeout} —Å–µ–∫)...")
        
        start_time = time.time()
        while time.time() - start_time < timeout:
            if not self.is_anki_running():
                print("‚úÖ Anki —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ!")
                return True
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            elapsed = int(time.time() - start_time)
            if elapsed % 10 == 0:
                remaining = timeout - elapsed
                print(f"‚è≥ –ü—Ä–æ—à–ª–æ {elapsed} —Å–µ–∫, –æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫...")
            
            time.sleep(1)
        
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ({timeout} —Å–µ–∫) –∏—Å—Ç—ë–∫!")
        return False
    
    def show_anki_status(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å Anki"""
        if self.is_anki_running():
            print("üî¥ Anki –ó–ê–ü–£–©–ï–ù–û")
            processes = self.get_anki_processes()
            if processes:
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(processes)}")
                for i, proc in enumerate(processes, 1):
                    print(f"   {i}. PID: {proc.get('pid', 'N/A')}")
                    if 'mem' in proc:
                        print(f"      –ü–∞–º—è—Ç—å: {proc['mem']}")
                    if 'command' in proc:
                        cmd = proc['command'][:50] + "..." if len(proc['command']) > 50 else proc['command']
                        print(f"      –ö–æ–º–∞–Ω–¥–∞: {cmd}")
        else:
            print("üü¢ Anki –ù–ï –ó–ê–ü–£–©–ï–ù–û")
    
    def request_anki_close(self) -> bool:
        """
        –ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—å Anki
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –∑–∞–∫—Ä—ã—Ç—å Anki
        """
        print("\n" + "="*60)
        print("üö® –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Anki!")
        print("="*60)
        
        self.show_anki_status()
        
        print("\nüìù –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫—Ä—ã—Ç—å Anki.")
        print("   –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Anki.")
        
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –ó–∞–∫—Ä—ã—Ç—å Anki –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
            print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Anki")
            print("3. –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞")
            
            try:
                choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
                
                if choice == "1":
                    print("\nüîÑ –ó–∞–∫—Ä—ã–≤–∞—é Anki...")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å Anki
                    if self._try_close_anki():
                        print("‚úÖ Anki —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ!")
                        return True
                    else:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å Anki.")
                        print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫—Ä–æ–π—Ç–µ Anki –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
                        input()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã–ª–æ—Å—å –ª–∏ Anki
                        if not self.is_anki_running():
                            print("‚úÖ Anki –∑–∞–∫—Ä—ã—Ç–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                            return True
                        else:
                            print("‚ùå Anki –≤—Å—ë –µ—â—ë –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                            continue
                
                elif choice == "2":
                    self.show_anki_status()
                    continue
                
                elif choice == "3":
                    print("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                    return False
                
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
                    continue
                    
            except KeyboardInterrupt:
                print("\n\n‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return False
            except EOFError:
                print("\n\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—Ü –≤–≤–æ–¥–∞.")
                return False
    
    def _try_close_anki(self) -> bool:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å Anki
        
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            if self.system == "darwin":  # macOS
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ osascript
                result = subprocess.run([
                    "osascript", "-e", 
                    'tell application "Anki" to quit'
                ], capture_output=True, text=True, timeout=10)
                
                if result.returncode == 0:
                    # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                    import time
                    time.sleep(2)
                    return not self.is_anki_running()
                
            elif self.system == "windows":
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ taskkill
                result = subprocess.run([
                    "taskkill", "/F", "/IM", "anki.exe"
                ], capture_output=True, text=True, timeout=10)
                
                if result.returncode == 0:
                    import time
                    time.sleep(2)
                    return not self.is_anki_running()
            
            elif self.system == "linux":
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ pkill
                result = subprocess.run([
                    "pkill", "-f", "anki"
                ], capture_output=True, text=True, timeout=10)
                
                if result.returncode == 0:
                    import time
                    time.sleep(2)
                    return not self.is_anki_running()
        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ Anki: {e}")
        
        return False


def check_anki_before_run() -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Anki –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    
    Returns:
        bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    """
    checker = AnkiChecker()
    
    if checker.is_anki_running():
        return checker.request_anki_close()
    else:
        print("‚úÖ Anki –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å...")
        return True


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è AnkiChecker")
    print("="*50)
    
    checker = AnkiChecker()
    checker.show_anki_status()
    
    if checker.is_anki_running():
        print("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö:")
        processes = checker.get_anki_processes()
        for proc in processes:
            print(f"   PID: {proc.get('pid', 'N/A')}")
            for key, value in proc.items():
                if key != 'pid':
                    print(f"      {key}: {value}")
    
    print(f"\n‚úÖ –ú–æ–¥—É–ª—å AnkiChecker –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Anki —á–µ—Ä–µ–∑ AnkiConnect.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP API AnkiConnect –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Anki.
–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Anki –≤ 2024 –≥–æ–¥—É.
"""

import json
import urllib.request
import urllib.error
from typing import List, Dict, Set, Optional, Any
from ..config import config
from ..cache import CacheManager  # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥–ø–∞–ø–æ–∫
import time
import random
import logging
import unicodedata

try:
    from tqdm import tqdm
except ImportError:
    tqdm = None


logger = logging.getLogger(__name__)


class AnkiConnector:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Anki —á–µ—Ä–µ–∑ AnkiConnect."""
    
    def __init__(self, url: str = "http://localhost:8765"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AnkiConnect –∫–ª–∏–µ–Ω—Ç.
        
        Args:
            url: URL AnkiConnect API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é localhost:8765)
        """
        self.url = url
        self.version = 6
        self._is_available = None
        
    def invoke(self, action: str, params: Optional[Dict] = None) -> Any:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ AnkiConnect API.
        
        Args:
            action: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "deckNames")
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            
        Raises:
            Exception: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        request_data = {
            'action': action,
            'version': self.version,
            'params': params or {}
        }
        
        retries = 3
        last_err: Optional[Exception] = None
        for attempt in range(retries):
            try:
                request_json = json.dumps(request_data).encode('utf-8')
                req = urllib.request.Request(self.url, request_json)
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
                timeout = 30 if action in ['cardsInfo', 'notesInfo', 'findNotes'] else 15
                response = urllib.request.urlopen(req, timeout=timeout)
                response_data = json.load(response)

                if len(response_data) != 2:
                    raise Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ AnkiConnect')

                if 'error' not in response_data or 'result' not in response_data:
                    raise Exception('–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è')

                if response_data['error'] is not None:
                    raise Exception(f"–û—à–∏–±–∫–∞ AnkiConnect: {response_data['error']}")

                return response_data['result']

            except (urllib.error.URLError, json.JSONDecodeError, Exception) as e:
                last_err = e
                if attempt < retries - 1:
                    backoff = (2 ** attempt) + random.uniform(0, 0.25)
                    logger.debug(f"–ü–æ–≤—Ç–æ—Ä AnkiConnect {action} —á–µ—Ä–µ–∑ {backoff:.2f}s: {e}")
                    time.sleep(backoff)
                    continue
                break
        raise Exception(f"–û—à–∏–±–∫–∞ AnkiConnect: {last_err}")
    
    def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AnkiConnect.
        
        Returns:
            True –µ—Å–ª–∏ AnkiConnect –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        if self._is_available is not None:
            return self._is_available
            
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            result = self.invoke('version')
            self._is_available = isinstance(result, int) and result >= 6
            return self._is_available
        except Exception:
            self._is_available = False
            return False
    
    def get_deck_names(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–æ–¥ –≤ Anki.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–¥
        """
        try:
            return self.invoke('deckNames') or []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–¥: {e}")
            return []
    
    def find_spanish_decks(self, pattern: str = "Spanish") -> List[str]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∏—Å–ø–∞–Ω—Å–∫–∏–µ –∫–æ–ª–æ–¥—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É.
        
        Args:
            pattern: –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Spanish")
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –∫–æ–ª–æ–¥
        """
        all_decks = self.get_deck_names()
        pattern_lower = pattern.lower().replace('*', '')
        
        spanish_decks = []
        for deck in all_decks:
            if pattern_lower in deck.lower():
                spanish_decks.append(deck)
                
        return spanish_decks
    
    def get_cards_from_deck(self, deck_name: str) -> List[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –∫–æ–ª–æ–¥—ã.
        
        Args:
            deck_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ ID –∫–∞—Ä—Ç–æ—á–µ–∫
        """
        try:
            query = f'deck:"{deck_name}"'
            return self.invoke('findCards', {'query': query}) or []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –∫–æ–ª–æ–¥—ã {deck_name}: {e}")
            return []
    
    def get_notes_info(self, note_ids: List[int]) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ—Ç–∫–∞—Ö –ø–æ –∏—Ö ID.
        
        Args:
            note_ids: –°–ø–∏—Å–æ–∫ ID –∑–∞–º–µ—Ç–æ–∫
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–º–µ—Ç–∫–∞—Ö
        """
        try:
            if not note_ids:
                return []
            return self.invoke('notesInfo', {'notes': note_ids}) or []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–º–µ—Ç–∫–∞—Ö: {e}")
            return []
    
    def get_cards_info(self, card_ids: List[int]) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –ø–æ –∏—Ö ID.
        
        Args:
            card_ids: –°–ø–∏—Å–æ–∫ ID –∫–∞—Ä—Ç–æ—á–µ–∫
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        """
        try:
            if not card_ids:
                return []
            return self.invoke('cardsInfo', {'cards': card_ids}) or []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö: {e}")
            return []
    
    def extract_all_spanish_words(self, deck_pattern: str = "Spanish") -> Set[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∏—Å–ø–∞–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–ª–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ Anki.
        
        Args:
            deck_pattern: –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –∫–æ–ª–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Spanish")
            
        Returns:
            –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–∑ –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –∫–æ–ª–æ–¥
        """
        all_words = set()
        # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ—Ä–º–∏–Ω–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏
        term_counts: Dict[str, int] = {}
        
        try:
            # –ö—ç—à –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –∫–æ–ª–æ–¥—ã (—É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –¥–ª—è Anki –¥–∞–Ω–Ω—ã—Ö)
            cache_key = f"anki_words:{deck_pattern}"
            cache = CacheManager.get_cache()
            cached = cache.get(cache_key)
            if cached and isinstance(cached, (set, list)):
                logger.info(f"‚ú® –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à Anki: {len(cached)} —Å–ª–æ–≤ (–±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)")
                return set(cached)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ Anki: deck:Spanish*
            query = f"deck:{deck_pattern}*"
            logger.info(f"AnkiConnect –∑–∞–ø—Ä–æ—Å: {query}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å –∑–∞–º–µ—Ç–∫–∞–º–∏, –∞ –Ω–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
            logger.debug(f"üîç –ù–∞—á–∏–Ω–∞–µ–º findNotes –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            start_time = time.time()
            all_note_ids = self.invoke('findNotes', {'query': query}) or []
            find_time = time.time() - start_time
            logger.debug(f"‚è±Ô∏è findNotes –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {find_time:.2f}s, –Ω–∞–π–¥–µ–Ω–æ IDs: {len(all_note_ids)}")
            
            if not all_note_ids:
                logger.warning(f"–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
                return all_words
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {len(all_note_ids)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ—Ç–∫–∞—Ö –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞
            batch_size = 100  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
            # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
            processed_notes = 0
            notes_with_terms = 0
            notes_without_spanish_fields = 0
            notes_with_empty_fields = 0
            notes_with_short_terms = 0
            
            total_batches = (len(all_note_ids) + batch_size - 1) // batch_size
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(all_note_ids)} –∑–∞–º–µ—Ç–æ–∫ –≤ {total_batches} –ø–∞–∫–µ—Ç–∞—Ö –ø–æ {batch_size}")
            
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º UI, –µ—Å–ª–∏ tqdm –¥–æ—Å—Ç—É–ø–µ–Ω
            if tqdm:
                progress_bar = tqdm(
                    total=total_batches, 
                    desc="üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –∏–∑ Anki", 
                    unit="–ø–∞–∫–µ—Ç",
                    ncols=80,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}] {postfix}'
                )
            else:
                progress_bar = None
            
            for batch_idx, i in enumerate(range(0, len(all_note_ids), batch_size)):
                batch_note_ids = all_note_ids[i:i + batch_size]
                batch_end = min(i + batch_size, len(all_note_ids))
                
                batch_start_time = time.time()
                logger.debug(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç {batch_idx+1}/{total_batches}: –∑–∞–º–µ—Ç–∫–∏ {i+1}-{batch_end}")
                
                if progress_bar:
                    # –ö—Ä–∞—Ç–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º UI
                    progress_bar.set_postfix({
                        "–ó–∞–º–µ—Ç–∫–∏": f"{i+1}-{batch_end}",
                        "–ù–∞–π–¥–µ–Ω–æ": f"{len(all_words)}"
                    })
                else:
                    logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ {i+1}-{batch_end} –∏–∑ {len(all_note_ids)} (–ø–∞–∫–µ—Ç {batch_idx+1}/{total_batches})")
                
                try:
                    logger.debug(f"üì° –ó–∞–ø—Ä–æ—Å notesInfo –¥–ª—è {len(batch_note_ids)} –∑–∞–º–µ—Ç–æ–∫...")
                    notes_start = time.time()
                    notes_info = self.get_notes_info(batch_note_ids)
                    notes_time = time.time() - notes_start
                    logger.debug(f"üì° notesInfo –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {notes_time:.2f}s, –ø–æ–ª—É—á–µ–Ω–æ {len(notes_info)} –∑–∞–º–µ—Ç–æ–∫")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –ø–æ–ª–µ–π –∑–∞–º–µ—Ç–æ–∫ (—Ç–æ–ª—å–∫–æ –∏—Å–ø–∞–Ω—Å–∫–∏–µ –ø–æ–ª—è)
                    for note in notes_info:
                        processed_notes += 1
                        note_id = note.get('noteId', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                        fields = note.get('fields', {})
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
                        front_text = fields.get('FrontText', {}).get('value', '') or fields.get('Front', {}).get('value', '')
                        back_text = fields.get('BackText', {}).get('value', '') or fields.get('Back', {}).get('value', '')
                        
                        if not front_text and not back_text:
                            notes_without_spanish_fields += 1
                            continue
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º –ø–æ–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏—Å–ø–∞–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç
                        spanish_field_location = self._detect_spanish_field(front_text, back_text)
                        spanish_text = front_text if spanish_field_location == 'front' else back_text

                        if not spanish_text or not spanish_text.strip():
                            notes_with_empty_fields += 1
                            continue
                            
                        logger.debug(f"üìé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É: '{spanish_text[:50]}{'...' if len(spanish_text) > 50 else '}'}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –ø–æ–ª—è
                        note_has_terms = False
                        terms = self._extract_terms_from_field(spanish_text)
                        if terms:
                            note_has_terms = True
                            for term in terms:
                                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Ç–µ—Ä–º–∏–Ω–∞ (–¥–ª—è –æ—Ç—á—ë—Ç–∞ –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö)
                                term_counts[term] = term_counts.get(term, 0) + 1
                                # –í –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞
                                all_words.add(term)
                        else:
                            # –¢–µ—Ä–º–∏–Ω—ã –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
                            import re
                            cleaned_text = re.sub(r'<[^>]+>', ' ', spanish_text).strip()
                            if cleaned_text and len(cleaned_text) < config.get_min_word_length():
                                # –¢–µ–∫—Å—Ç –µ—Å—Ç—å, –Ω–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
                                pass  # –ë—É–¥–µ—Ç —É—á—Ç—ë–Ω –Ω–∏–∂–µ
                        
                        if note_has_terms:
                            notes_with_terms += 1
                        else:
                            # –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –¥–∞–ª–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ - –≤—ã—è—Å–Ω—è–µ–º –ø–æ—á–µ–º—É
                            if spanish_text and spanish_text.strip():
                                notes_with_short_terms += 1  # –ï—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ —Ç–µ—Ä–º–∏–Ω—ã –∫–æ—Ä–æ—Ç–∫–∏–µ
                            else:
                                notes_with_empty_fields += 1  # –ü—É—Å—Ç–æ–µ –∏—Å–ø–∞–Ω—Å–∫–æ–µ –ø–æ–ª–µ
                
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞ –∑–∞–º–µ—Ç–æ–∫: {e}")
                    continue
                finally:
                    batch_time = time.time() - batch_start_time
                    logger.debug(f"‚úÖ –ü–∞–∫–µ—Ç {batch_idx+1} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {batch_time:.2f}s, –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: +{len(all_words) - len(term_counts) if len(all_words) >= len(term_counts) else 0}")
                    if progress_bar:
                        progress_bar.update(1)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if progress_bar:
                progress_bar.close()
            
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {len(all_words)}")
            try:
                logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(all_words)} —Å–ª–æ–≤ –≤ –∫—ç—à —Å –∫–ª—é—á–æ–º: {cache_key}")
                cache_start = time.time()
                cache.set(cache_key, list(all_words))
                cache_time = time.time() - cache_start
                logger.debug(f"üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∑–∞ {cache_time:.2f}s")
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {e}")
                pass
            
            # === –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ –û–ë –ò–°–ö–õ–Æ–ß–Å–ù–ù–´–• –ó–ê–ú–ï–¢–ö–ê–• ===
            excluded_total = processed_notes - notes_with_terms
            if excluded_total > 0:
                logger.info("–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–º–µ—Ç–æ–∫:")
                logger.info(f"  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {len(all_note_ids)}")
                logger.info(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {processed_notes}")
                logger.info(f"  –ó–∞–º–µ—Ç–∫–∏ —Å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏: {notes_with_terms}")
                logger.info(f"  –ò—Å–∫–ª—é—á–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {excluded_total}")
                
                if notes_without_spanish_fields > 0:
                    logger.info(f"  ‚Ä¢ –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (FrontText/BackText): {notes_without_spanish_fields}")
                
                if notes_with_empty_fields > 0:
                    logger.info(f"  ‚Ä¢ –ü—É—Å—Ç—ã–µ –ø–æ–ª—è —Å –∏—Å–ø–∞–Ω—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º: {notes_with_empty_fields}")
                
                if notes_with_short_terms > 0:
                    min_length = config.get_min_word_length()
                    logger.info(f"  ‚Ä¢ –¢–µ—Ä–º–∏–Ω—ã –∫–æ—Ä–æ—á–µ {min_length} —Å–∏–º–≤–æ–ª–æ–≤: {notes_with_short_terms}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤
                accounted = notes_without_spanish_fields + notes_with_empty_fields + notes_with_short_terms
                if excluded_total > accounted:
                    other_reasons = excluded_total - accounted
                    logger.info(f"  ‚Ä¢ –î—Ä—É–≥–∏–µ –ø—Ä–∏—á–∏–Ω—ã (–æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏): {other_reasons}")
            
            # –û—Ç—á—ë—Ç –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö (–æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Ç–µ—Ä–º–∏–Ω—ã, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–º–µ—Ç–∫–∞—Ö)
            duplicated = {t: c for t, c in term_counts.items() if c > 1}
            if duplicated:
                total_extra = sum(c - 1 for c in duplicated.values())
                logger.info(f"–î—É–±–ª–∏–∫–∞—Ç—ã —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –∑–∞–º–µ—Ç–∫–∞—Ö: {len(duplicated)} (–∏—Å–∫–ª—é—á–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π: {total_extra})")
                sample = sorted(duplicated.items(), key=lambda kv: kv[1], reverse=True)[:5]
                for term, cnt in sample:
                    logger.info(f"  - '{term}' ‚Üí {cnt}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ª–æ–≤ –∏–∑ Anki: {e}")
        
        return all_words
    
    def _detect_spanish_field(self, front_text: str, back_text: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–æ–µ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø–∞–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä.
        
        Args:
            front_text: –¢–µ–∫—Å—Ç –ø–æ–ª—è FrontText
            back_text: –¢–µ–∫—Å—Ç –ø–æ–ª—è BackText
            
        Returns:
            'front' –µ—Å–ª–∏ –∏—Å–ø–∞–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ FrontText, 'back' –µ—Å–ª–∏ –≤ BackText
        """
        import re
        
        def calculate_latin_ratio(text: str) -> float:
            """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–æ–ª—é –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –±—É–∫–≤ –≤ —Ç–µ–∫—Å—Ç–µ."""
            if not text:
                return 0.0
            
            # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
            clean_text = re.sub(r'<[^>]+>', ' ', text)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –±—É–∫–≤—ã (–ª—é–±–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞)
            all_letters = re.findall(r'[a-zA-Z√°√©√≠√≥√∫√±√º√Å√â√ç√ì√ö√ë√ú–∞-—è—ë–ê-–Ø–Å]', clean_text)
            if not all_letters:
                return 0.0
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (–≤–∫–ª—é—á–∞—è –∏—Å–ø–∞–Ω—Å–∫–∏–µ –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏) –∏ —Ü–∏—Ñ—Ä—ã
            latin_and_digits = re.findall(r'[a-zA-Z√°√©√≠√≥√∫√±√º√Å√â√ç√ì√ö√ë√ú0-9]', clean_text)
            
            return len(latin_and_digits) / len(all_letters)
        
        front_ratio = calculate_latin_ratio(front_text)
        back_ratio = calculate_latin_ratio(back_text)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–µ —Å –±–æ–ª—å—à–µ–π –¥–æ–ª–µ–π –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        return 'front' if front_ratio >= back_ratio else 'back'
    
    def _extract_terms_from_field(self, text: str) -> Set[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –ø–æ–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∫ —Ü–µ–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑—É—á–µ–Ω–∏—è.
        
        –í–ê–ñ–ù–û: –ù–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞! –ö–∞–∂–¥–æ–µ –ø–æ–ª–µ FrontText - —ç—Ç–æ –æ–¥–∏–Ω —Ç–µ—Ä–º–∏–Ω.
        
        Args:
            text: –¢–µ–∫—Å—Ç –ø–æ–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
            
        Returns:
            –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ (—Ü–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑/—Å–ª–æ–≤)
        """
        import re
        
        if not text:
            return set()
        
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', ' ', text)
        
        # –ï–¥–∏–Ω–∞—è Unicode-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (NFC) –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º
        text = unicodedata.normalize('NFC', text)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        text = re.sub(r'\s+', ' ', text).strip()
        
        if not text:
            return set()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
        min_length = config.get_min_word_length()
        if len(text) >= min_length:
            return {text.lower()}
        
        return set()
    
    def get_connection_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ AnkiConnect.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        """
        info = {
            'url': self.url,
            'available': False,
            'version': None,
            'total_decks': 0,
            'spanish_decks': [],
            'error': None
        }
        
        try:
            if self.is_available():
                info['available'] = True
                info['version'] = self.invoke('version')
                info['total_decks'] = len(self.get_deck_names())
                info['spanish_decks'] = self.find_spanish_decks("Spanish")
            else:
                info['error'] = "AnkiConnect –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        except Exception as e:
            info['error'] = str(e)
        
        return info

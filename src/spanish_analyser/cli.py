#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è Spanish Analyser

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π CLI –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:
1. Web Scraper - –∑–∞–≥—Ä—É–∑–∫–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü —Å practicatest.com
2. Text Analyzer - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á—ë—Ç–æ–≤
3. Anki Deck Generator - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥ Anki
"""

import os
import sys
import argparse
from typing import Optional
from pathlib import Path

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤–º–µ—Å—Ç–æ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å sys.path


def run_web_scraper():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤"""
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä–∞...")
    
    try:
        from spanish_analyser.tools.web_scraper.download_tests import download_available_tests
        success = download_available_tests()
        
        if success:
            print("‚úÖ –í–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –í–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä–∞: {e}")
        return False


def run_text_analyzer():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    print("üìä –ó–∞–ø—É—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    try:
        from spanish_analyser.tools.text_analyzer.driving_tests_analyzer import DrivingTestsAnalyzer
        
        # –°–æ–∑–¥–∞—ë–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–ø—É—Ç–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ config.yaml)
        analyzer = DrivingTestsAnalyzer()
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Anki
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Anki...")
            if not analyzer.connect_to_anki():
                print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ Anki...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª—ã
            print("\nüìÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ HTML —Ñ–∞–π–ª–æ–≤...")
            analysis_result = analyzer.analyze_html_files()
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {analysis_result['files_processed']}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: {analysis_result['words_found']}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {analysis_result['unique_words']}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            export_file = analyzer.export_results()
            
            if export_file:
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {export_file}")
            
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
            try:
                from .cache import CacheManager
                cache = CacheManager.get_cache()
                cache_stats = cache.stats_dict()
                if cache_stats['hits'] > 0 or cache_stats['stores'] > 0:
                    print(f"\nüíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
                    print(f"   –ü–æ–ø–∞–¥–∞–Ω–∏–π: {cache_stats['hits']}")
                    print(f"   –ü—Ä–æ–º–∞—Ö–æ–≤: {cache_stats['misses']}")
                    print(f"   –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ: {cache_stats['files']}")
                    print(f"   –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {cache_stats['size_mb']:.1f} –ú–ë")
            except Exception:
                pass
            
            return True
            
        finally:
            analyzer.close()
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return False


def run_anki_deck_generator():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Anki –∫–æ–ª–æ–¥"""
    print("üß© –ó–∞–ø—É—Å–∫ Anki Deck Generator...")
    
    try:
        from spanish_analyser.tools.anki_deck_generator.anki_deck_maker import run_cli as run_anki_deck_maker
        
        code = run_anki_deck_maker()
        if code == 0:
            print("‚úÖ Anki Deck Generator –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå Anki Deck Generator –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è Anki Deck Generator: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Anki Deck Generator: {e}")
        return False


def _apply_music_env_from_config(cfg) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ENV –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –∏–∑ config.yaml, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã —è–≤–Ω–æ."""
    os.environ.setdefault("SPANISH_ANALYSER_CHIPTUNE_PRESET", str(cfg.get_chiptune_preset()))
    os.environ.setdefault("SPANISH_ANALYSER_CHIPTUNE_TEMPO", str(cfg.get_chiptune_tempo()))
    os.environ.setdefault("SPANISH_ANALYSER_CHIPTUNE_DURATION", str(cfg.get_chiptune_duration()))
    os.environ.setdefault("SPANISH_ANALYSER_CHIPTUNE_AMP", str(cfg.get_chiptune_amp()))
    audio_dev = cfg.get_audio_device()
    if audio_dev is not None:
        os.environ.setdefault("SPANISH_ANALYSER_AUDIO_DEVICE", str(audio_dev))


def _start_chiptune(cfg) -> Optional["ChiptunePlayer"]:  # type: ignore[name-defined]
    """–ü—Ä–æ–±—É–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–∏–ø—Ç—é–Ω –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–ª–µ–µ—Ä. –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî None."""
    try:
        sys.path.insert(0, str(Path(__file__).parent / "tools"))
        from chiptune_player import ChiptunePlayer  # type: ignore
        _apply_music_env_from_config(cfg)
        player = ChiptunePlayer()
        if not player.start():
            print("üéµ –ß–∏–ø—Ç—é–Ω: –∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–ø—Ä–æ–ø—É—Å–∫–∞—é)")
            return None
        preset = os.environ.get("SPANISH_ANALYSER_CHIPTUNE_PRESET", "cambio_groove")
        tempo = os.environ.get("SPANISH_ANALYSER_CHIPTUNE_TEMPO", "0.11")
        duration = os.environ.get("SPANISH_ANALYSER_CHIPTUNE_DURATION", "150")
        print(f"üéµ –ß–∏–ø—Ç—é–Ω: –∑–∞–ø—É—â–µ–Ω (preset={preset}, tempo={tempo}s, duration‚âà{duration}s)")
        return player
    except Exception:
        print("üéµ –ß–∏–ø—Ç—é–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å (–ø—Ä–æ–ø—É—Å–∫–∞—é)")
        return None


def _stop_chiptune(player: Optional["ChiptunePlayer"]) -> None:  # type: ignore[name-defined]
    try:
        if player is not None and getattr(player, "is_running", False):
            player.stop()
    except Exception:
        pass


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    from .config import config
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SPANISH_ANALYSER_DEBUG –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if os.environ.get('SPANISH_ANALYSER_DEBUG') == '1':
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DEBUG —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        os.environ['SPANISH_ANALYSER_LOGGING__LEVEL'] = 'DEBUG'
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å ENV –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        config._apply_env_overrides()
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç DEBUG —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ SPANISH_ANALYSER_DEBUG=1")
        print(f"üîç –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ config: {config.get_logging_level()}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ—Å–ª–µ ENV-override)
    config._configure_logging_if_needed(force=True)
    # –†–∞–Ω–Ω—è—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞: —Å–æ–∑–¥–∞—ë—Ç –ø–æ–¥–ø–∞–ø–∫–∏ –∏ –º–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è cache/.
    try:
        from .cache import CacheManager
        CacheManager.get_cache()
    except Exception:
        pass
    # –Ø–≤–Ω–æ —Å–æ–æ–±—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    import logging as _logging
    _eff = _logging.getLevelName(_logging.getLogger().getEffectiveLevel())
    print(f"ü™µ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ: {_eff} (config={config.get_logging_level()})")
    
    parser = argparse.ArgumentParser(
        description="Spanish Analyser - –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–∞–Ω—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Anki",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python -m spanish_analyser.cli --scraper          # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä–∞
  python -m spanish_analyser.cli --analyzer         # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
  python -m spanish_analyser.cli --anki-generator   # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ Anki –∫–æ–ª–æ–¥
  python -m spanish_analyser.cli --all              # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  python -m spanish_analyser.cli                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        """
    )
    
    parser.add_argument(
        '--scraper', 
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤'
    )
    
    parser.add_argument(
        '--analyzer', 
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä'
    )
    
    parser.add_argument(
        '--anki-generator', 
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Anki –∫–æ–ª–æ–¥'
    )
    
    parser.add_argument(
        '--all', 
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'
    )
    
    args = parser.parse_args()
    
    print("üöó Spanish Analyser - –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–∞–Ω—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤")
    print("=" * 50)
    
    if args.all:
        print("üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        success = True
        success &= run_web_scraper()
        print("\n" + "=" * 50)
        success &= run_text_analyzer()
        print("\n" + "=" * 50)
        success &= run_anki_deck_generator()
        
        if success:
            print("\n‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ")
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        
    elif args.scraper:
        run_web_scraper()
        
    elif args.analyzer:
        run_text_analyzer()
        
    elif args.anki_generator:
        run_anki_deck_generator()
        
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        from .config import config
        
        use_music = config.is_chiptune_enabled() or (os.environ.get("SPANISH_ANALYSER_CHIPTUNE", "0") == "1")
        player: Optional["ChiptunePlayer"] = None  # type: ignore[name-defined]
        
        while True:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º—É–∑—ã–∫—É —Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
            if use_music and (player is None or not getattr(player, "is_running", False)):
                player = _start_chiptune(config)

            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
            print("1. üåê Web Scraper - –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å practicatest.com")
            print("2. üìä Text Analyzer - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤")
            print("3. üß© Anki Deck Generator - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥ Anki")
            print("4. üö™ –í—ã—Ö–æ–¥")
            if use_music:
                print("\nüéµ –§–æ–Ω–æ–≤–∞—è 8-–±–∏—Ç –º—É–∑—ã–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")

            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (1-4): ").strip()

            if choice == '1':
                _stop_chiptune(player)
                player = None
                run_web_scraper()
            elif choice == '2':
                _stop_chiptune(player)
                player = None
                run_text_analyzer()
            elif choice == '3':
                # –ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é: –≤ —Ç—Ä–µ—Ç—å–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –º—É–∑—ã–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä–∞—Ç—å
                run_anki_deck_generator()
            elif choice == '4':
                _stop_chiptune(player)
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç WordAnalyzer –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ __init__.py
"""

import sys
import os
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append('src')

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_text = """La casa es muy grande. Yo corro r√°pido en el parque.
Este libro es interesante. El ni√±o come frutas todos los d√≠as.
"""

def test_word_analyzer_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç WordAnalyzer –Ω–∞–ø—Ä—è–º—É—é"""
    print("üß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WordAnalyzer")
    print("=" * 50)

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏, –∏–∑–±–µ–≥–∞—è __init__.py
        import importlib.util

        # –ó–∞–≥—Ä—É–∂–∞–µ–º config.py
        config_path = 'src/spanish_analyser/config.py'
        spec = importlib.util.spec_from_file_location("config", config_path)
        config_module = importlib.util.module_from_spec(spec)
        sys.modules["config"] = config_module
        spec.loader.exec_module(config_module)
        config = config_module.config

        # –ó–∞–≥—Ä—É–∂–∞–µ–º word_analyzer.py
        word_analyzer_path = 'src/spanish_analyser/word_analyzer.py'
        spec = importlib.util.spec_from_file_location("word_analyzer", word_analyzer_path)
        word_analyzer_module = importlib.util.module_from_spec(spec)
        sys.modules["word_analyzer"] = word_analyzer_module
        spec.loader.exec_module(word_analyzer_module)

        WordAnalyzer = word_analyzer_module.WordAnalyzer

        analyzer = WordAnalyzer()

        print(f"spaCy –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {analyzer.nlp is not None}")
        print(f"–ú–æ–¥–µ–ª—å: {config.get_spacy_model()}")
        print()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π —Ä–µ—á–∏
        test_words = ["casa", "correr", "r√°pido", "en", "muy", "grande"]
        print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å—Ç–µ–π —Ä–µ—á–∏:")
        print("-" * 40)

        for word in test_words:
            pos = analyzer.determine_pos(word)
            print("12")

        print()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞:")
        print("-" * 40)

        analyzer.add_words_from_text(test_text)

        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        for word_with_pos, freq in analyzer.word_frequencies.most_common(10):
            if ' (' in word_with_pos and word_with_pos.endswith(')'):
                word = word_with_pos.split(' (')[0]
                pos = word_with_pos.split(' (')[1].rstrip(')')
            else:
                word = word_with_pos
                pos = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            print(f"  {word}: {pos} ({freq})")

        print()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel (—Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª)
        print("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel:")
        print("-" * 40)

        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp_file:
            temp_filename = tmp_file.name

        try:
            analyzer.export_to_excel(temp_filename)
            print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_filename}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            import pandas as pd
            df = pd.read_excel(temp_filename)
            print(f"‚úÖ –í Excel —Ñ–∞–π–ª–µ {len(df)} —Å—Ç—Ä–æ–∫")

            if len(df) > 0:
                print("üìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel:")
                for i, row in df.head(3).iterrows():
                    print(f"  {row['Word']}: {row['Part of Speech']}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_filename):
                os.unlink(temp_filename)
                print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_filename}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_word_analyzer_direct()



#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenAI API.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ù–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
- –°—Ç–∞—Ç—É—Å –∫–≤–æ—Ç—ã
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parents[2]))
sys.path.insert(0, str(Path(__file__).parents[2] / "tools" / "anki_deck_generator"))

from openai_helper import generate_front_and_back, QuotaExceededError
from spanish_analyser.config import config
from dotenv import load_dotenv


def test_openai_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenAI API."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key or not api_key.strip():
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   OPENAI_API_KEY=your_api_key_here")
        return False
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∫–∞–∑–∞
    masked_key = f"{api_key[:8]}...{api_key[-4:]}" if len(api_key) > 12 else "***"
    print(f"üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {masked_key}")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    default_model = config.get_ai_model()
    print(f"üß† –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_model}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    try:
        print("\nüì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        result = generate_front_and_back("test", front_text="test", model="gpt-3.5-turbo", pos="noun")
        print("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ")
        print(f"   –û—Ç–≤–µ—Ç: {result[1][:100]}..." if len(result[1]) > 100 else f"   –û—Ç–≤–µ—Ç: {result[1]}")
        
    except QuotaExceededError as e:
        print(f"üí∞ {e}")
        print("\nüîß –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://platform.openai.com/account/billing")
        print("   2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω")
        print("   3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
    print("\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π...")
    models_to_test = ["gpt-3.5-turbo", "gpt-4", default_model]
    models_to_test = list(set(models_to_test))  # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    for model in models_to_test:
        try:
            result = generate_front_and_back("hola", front_text="hola", model=model, pos="interjection")
            print(f"   ‚úÖ {model}: –¥–æ—Å—Ç—É–ø–Ω–∞")
        except QuotaExceededError:
            print(f"   üí∞ {model}: –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞")
        except Exception as e:
            if "does not exist" in str(e).lower() or "invalid" in str(e).lower():
                print(f"   ‚ùå {model}: –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                print(f"   ‚ö†Ô∏è  {model}: {str(e)[:50]}...")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return True


def show_cache_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞ OpenAI."""
    try:
        from spanish_analyser.cache import CacheManager
        cache = CacheManager.get_cache()
        stats = cache.stats_dict()
        
        print("\nüìä –°—Ç–∞—Ç—É—Å –∫—ç—à–∞ OpenAI:")
        openai_stats = stats['by_bucket'].get('openai', {})
        if openai_stats.get('hits', 0) > 0 or openai_stats.get('stores', 0) > 0:
            print(f"   Hits: {openai_stats.get('hits', 0)}")
            print(f"   Stores: {openai_stats.get('stores', 0)}")
            openai_size = stats['sizes'].get('openai', {})
            print(f"   –§–∞–π–ª–æ–≤: {openai_size.get('files', 0)}")
            print(f"   –†–∞–∑–º–µ—Ä: {openai_size.get('size_mb', 0)} MB")
        else:
            print("   –ö—ç—à –ø—É—Å—Ç")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞: {e}")


if __name__ == "__main__":
    if test_openai_connection():
        show_cache_status()
        print("\n‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å OpenAI API. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        sys.exit(1)

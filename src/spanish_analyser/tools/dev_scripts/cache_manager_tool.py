#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º –ø—Ä–æ–µ–∫—Ç–∞.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫—ç—à–∞ —Å —á–∏—Ç–∞–µ–º—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤
- –û—á–∏—Å—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—É–ª–æ–≤ –∫—ç—à–∞
- –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–º–æ–¥–µ–ª—å, —Å–ª–æ–≤–æ –∏ —Ç.–¥.)
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parents[2]))

from spanish_analyser.cache import CacheManager
from spanish_analyser.config import config
import argparse


def list_cache_files(pool: str = None, pattern: str = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∫—ç—à–∞ —Å –∏—Ö —á–∏—Ç–∞–µ–º—ã–º–∏ –∏–º–µ–Ω–∞–º–∏."""
    cache_root = Path(config.get_cache_root_dir())
    
    pools_to_check = [pool] if pool else ['html', 'anki', 'spacy', 'openai']
    
    print("üìÅ –§–∞–π–ª—ã –∫—ç—à–∞:")
    for pool_name in pools_to_check:
        pool_dir = cache_root / pool_name
        if not pool_dir.exists():
            continue
            
        files = list(pool_dir.glob("*.bin"))
        if pattern:
            files = [f for f in files if pattern.lower() in f.name.lower()]
            
        if files:
            print(f"\n{pool_name.upper()} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
            for file in sorted(files, key=lambda x: x.stat().st_mtime, reverse=True):
                size_kb = file.stat().st_size / 1024
                mtime = file.stat().st_mtime
                age_hours = (os.path.getmtime(__file__) - mtime) / 3600 if mtime else 0
                print(f"  {file.name} ({size_kb:.1f}KB, {age_hours:.1f}h –Ω–∞–∑–∞–¥)")


def clear_cache(pool: str = None, pattern: str = None, confirm: bool = True):
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞ –∏–ª–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É."""
    cache_root = Path(config.get_cache_root_dir())
    
    pools_to_clear = [pool] if pool else ['html', 'anki', 'spacy', 'openai']
    files_to_remove = []
    
    for pool_name in pools_to_clear:
        pool_dir = cache_root / pool_name
        if not pool_dir.exists():
            continue
            
        files = list(pool_dir.glob("*.bin"))
        if pattern:
            files = [f for f in files if pattern.lower() in f.name.lower()]
            
        files_to_remove.extend(files)
    
    if not files_to_remove:
        print("ü§∑ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
        
    print(f"üóëÔ∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(files_to_remove)} —Ñ–∞–π–ª–æ–≤:")
    for file in files_to_remove:
        print(f"  {file.relative_to(cache_root)}")
    
    if confirm:
        response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if response not in ['–¥–∞', 'yes', 'y', '1']:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
    
    removed = 0
    for file in files_to_remove:
        try:
            file.unlink()
            removed += 1
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file.name}: {e}")
    
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed} —Ñ–∞–π–ª–æ–≤")


def show_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞."""
    cache = CacheManager.get_cache()
    stats = cache.stats_dict()
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
    print(f"  –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
    print(f"    Hits: {stats['hits']}")
    print(f"    Misses: {stats['misses']}")
    print(f"    Expired: {stats['expired']}")
    print(f"    Stores: {stats['stores']}")
    print(f"    Errors: {stats['errors']}")
    
    print(f"\n  –ü–æ –ø—É–ª–∞–º:")
    for pool, pool_stats in stats['by_bucket'].items():
        if any(pool_stats.values()):
            print(f"    {pool}: hits={pool_stats['hits']}, stores={pool_stats['stores']}, expired={pool_stats['expired']}")
    
    print(f"\n  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"    –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: {stats['root']}")
    print(f"    –õ–∏–º–∏—Ç –Ω–∞ –ø—É–ª: {stats['limit_mb_per_bucket']} MB")
    
    print(f"\n  TTL (–¥–Ω–∏):")
    for pool, ttl in stats['ttl_days'].items():
        enabled = stats['enabled'][pool]
        status = "‚úÖ" if enabled else "‚ùå"
        print(f"    {pool}: {ttl} –¥–Ω–µ–π {status}")
    
    print(f"\n  –†–∞–∑–º–µ—Ä—ã –ø—É–ª–æ–≤:")
    for pool, size_info in stats['sizes'].items():
        if size_info['files'] > 0:
            print(f"    {pool}: {size_info['files']} —Ñ–∞–π–ª–æ–≤, {size_info['size_mb']} MB")


def main():
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º –ø—Ä–æ–µ–∫—Ç–∞")
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ list
    list_parser = subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –∫—ç—à–∞')
    list_parser.add_argument('--pool', choices=['html', 'anki', 'spacy', 'openai'], help='–§–∏–ª—å—Ç—Ä –ø–æ –ø—É–ª—É')
    list_parser.add_argument('--pattern', help='–§–∏–ª—å—Ç—Ä –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ clear
    clear_parser = subparsers.add_parser('clear', help='–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à')
    clear_parser.add_argument('--pool', choices=['html', 'anki', 'spacy', 'openai'], help='–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É–ª')
    clear_parser.add_argument('--pattern', help='–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É')
    clear_parser.add_argument('--force', action='store_true', help='–ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
    
    # –ö–æ–º–∞–Ω–¥–∞ stats
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞')
    
    args = parser.parse_args()
    
    if args.command == 'list':
        list_cache_files(args.pool, args.pattern)
    elif args.command == 'clear':
        clear_cache(args.pool, args.pattern, not args.force)
    elif args.command == 'stats':
        show_stats()
    else:
        parser.print_help()


if __name__ == "__main__":
    main()

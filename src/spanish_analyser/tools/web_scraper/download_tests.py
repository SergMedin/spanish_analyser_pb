#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤ practicatest.com

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –Ω–∞ practicatest.com
2. –ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
4. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å –∫–Ω–æ–ø–∫–æ–π TEST
5. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å –∫–Ω–æ–ø–∫–æ–π Premium
6. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ—Å—Ç—ã –≤ –ø–∞–ø–∫—É data/downloads
"""

import logging
from pathlib import Path

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ spanish_analyser.config

from .practicatest_auth import PracticaTestAuth
from .practicatest_parser import PracticaTestParser
from .test_downloader import TestDownloader
from spanish_analyser.config import config


def download_available_tests():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    
    Returns:
        True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ practicatest.com")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    project_root = Path(__file__).parent.parent.parent.parent.parent
    env_file = project_root / ".env"
    
    if not env_file.exists():
        print("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Ö–æ–¥–∞:")
        print("   PRACTICATEST_EMAIL=–≤–∞—à_email@example.com")
        print("   PRACTICATEST_PASSWORD=–≤–∞—à_–ø–∞—Ä–æ–ª—å")
        return False
    
    print(f"‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω: {env_file.absolute()}")
    
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth = PracticaTestAuth()
    
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        print("\nüîê –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        if not auth.login():
            print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
        
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä
        print("\nüîç –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞...")
        parser = PracticaTestParser(auth.session)
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ç–µ—Å—Ç–∞–º–∏
        print("\nüìã –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Å—Ç–æ–≤...")
        table = parser.get_tests_table()
        
        if not table:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–µ—Å—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–µ—Å—Ç–∞–º–∏ –ø–æ–ª—É—á–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ç–µ—Å—Ç–æ–≤
        print("\nüì• –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤...")
        # –ë–µ—Ä—ë–º –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–∞–º –∏–∑ config.yaml
        downloads_path = Path(config.get_downloads_folder())
        downloader = TestDownloader(auth.session, str(downloads_path))
        print("‚úÖ –ó–∞–≥—Ä—É–∑—á–∏–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω")
        
        # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É —Ç–µ—Å—Ç–æ–≤
        print("\nüîç –®–∞–≥ 5: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Å—Ç–æ–≤...")
        table_html = str(table)
        tests_data = downloader.parse_tests_table(table_html)
        
        if not tests_data:
            print("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tests_data)} —Ç–µ—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫
        test_tests = [t for t in tests_data if t['button_type'] == "TEST"]
        premium_tests = [t for t in tests_data if t['button_type'] == "Premium"]
        
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã:")
        print(f"  üîò –¢–µ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π TEST: {len(test_tests)}")
        print(f"  ‚≠ê –¢–µ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π Premium: {len(premium_tests)}")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á—ë—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ
        print("\nüìä –®–∞–≥ 6: –û—Ç—á—ë—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ...")
        downloader.print_download_report(tests_data)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if test_tests:
            print("\nüöÄ –®–∞–≥ 7: –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ—Å—Ç–æ–≤...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
            report = downloader.download_all_available_tests(tests_data)
            
            if report:
                print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:")
                print(f"  üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: {report['total_tests']}")
                print(f"  üìÅ –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {report['existing_tests']}")
                print(f"  üöÄ –ù–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤: {report['new_tests']}")
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {report['downloaded_tests']}")
                print(f"  ‚ùå –û—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: {report['failed_tests']}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = downloader.get_test_statistics()
            if stats:
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:")
                print(f"  üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
                if stats['oldest_date']:
                    print(f"  üìÖ –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞: {stats['oldest_date']}")
                if stats['newest_date']:
                    print(f"  üìÖ –°–∞–º–∞—è –Ω–æ–≤–∞—è –¥–∞—Ç–∞: {stats['newest_date']}")
                if stats['date_range'] is not None:
                    print(f"  üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {stats['date_range']} –¥–Ω–µ–π")
        else:
            print("\n‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!")
        
        print("\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        auth.close()
        print("\nüîí –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = download_available_tests()
    
    if success:
        print("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        sys.exit(1)


if __name__ == "__main__":
    main()

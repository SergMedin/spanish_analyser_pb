#!/usr/bin/env python3
__test__ = False  # –æ—Ç–∫–ª—é—á–∞–µ–º —Å–±–æ—Ä pytest: —ç—Ç–æ –º–æ–¥—É–ª—å —è–¥—Ä–∞, –Ω–µ —Ç–µ—Å—Ç
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º –Ω–∞ practicatest.com

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è:
- –ê–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Å—Ç–æ–≤
- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫
- –ó–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É data/downloads
"""

import os
import logging
import re
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime
from bs4 import BeautifulSoup
import requests

logger = logging.getLogger(__name__)


class TestDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º"""
    
    def __init__(self, auth_session: Optional[requests.Session] = None, downloads_path: str = None) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
        
        Args:
            auth_session: –°–µ—Å—Å–∏—è requests —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            downloads_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
        """
        from spanish_analyser.config import config
        self.session = auth_session
        self.base_url = "https://practicatest.com"
        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –±–µ—Ä—ë–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        resolved_path = downloads_path or config.get_downloads_folder()
        self.downloads_path = Path(resolved_path)
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.downloads_path.mkdir(parents=True, exist_ok=True)
        
        # –§–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: test_YYYY-MM-DD.html
        self.filename_pattern = r"test_(\d{4})-(\d{2})-(\d{2})\.html"
        
        logger.info(f"üöÄ –ó–∞–≥—Ä—É–∑—á–∏–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–∞–ø–∫–∏: {self.downloads_path}")
    
    def parse_tests_table(self, table_html: str) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–µ—Å—Ç–æ–≤ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
        
        Args:
            table_html: HTML —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–µ—Å—Ç–∞–º–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ—Å—Ç–∞—Ö
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Å—Ç–æ–≤...")
            
            soup = BeautifulSoup(table_html, 'html.parser')
            tests_data = []
            
            # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            rows = soup.find_all('tr')
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}")
            
            for i, row in enumerate(rows):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if i == 0:
                    continue
                    
                cells = row.find_all(['td', 'th'])
                if len(cells) >= 5:  # –¢–∞–±–ª–∏—Ü–∞ –∏–º–µ–µ—Ç 5 –∫–æ–ª–æ–Ω–æ–∫
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏
                    date_cell = cells[0].get_text(strip=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç DD-MM-YYYY)
                    if re.match(r'\d{2}-\d{2}-\d{4}', date_cell):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –≤—Ç–æ—Ä–æ–π —è—á–µ–π–∫–∏
                        status = cells[1].get_text(strip=True)
                        
                        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤ –ø—è—Ç–æ–π —è—á–µ–π–∫–µ (–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞)
                        action_cell = cells[4]
                        
                        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —è—á–µ–π–∫—É –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥–∞—Ç—ã {date_cell}: '{action_cell.get_text(strip=True)}'")
                        
                        # –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –≤–æ –í–°–ï–ô —Å—Ç—Ä–æ–∫–µ (–Ω–µ —Ç–æ–ª—å–∫–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —è—á–µ–π–∫–µ)
                        buttons = row.find_all(['button', 'a'])
                        
                        if buttons:
                            for button in buttons:
                                button_text = button.get_text(strip=True).strip()
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
                                # –ö–Ω–æ–ø–∫–∞ TEST –∏–º–µ–µ—Ç —Ç–µ–∫—Å—Ç "TEST >" –∏–ª–∏ "TEST"
                                if 'test' in button_text.lower() and not 'login' in button_text.lower():
                                    button_type = "TEST"
                                elif 'login' in button_text.lower():
                                    button_type = "Premium"
                                else:
                                    button_type = "Unknown"
                                
                                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                                href = button.get('href', '')
                                onclick = button.get('onclick', '')
                                
                                test_info = {
                                    'date': date_cell,
                                    'status': status,
                                    'button_type': button_type,
                                    'button_text': button_text,
                                    'href': href,
                                    'onclick': onclick,
                                    'raw_html': str(row),
                                    'row_index': i
                                }
                                tests_data.append(test_info)
                                
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç: {date_cell} - {button_type} - '{button_text}'")
                        else:
                            logger.info(f"–í —Å—Ç—Ä–æ–∫–µ –¥–ª—è –¥–∞—Ç—ã {date_cell} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫")
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tests_data)} —Ç–µ—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ")
            return tests_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return []
    
    def get_existing_downloads(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞—Ç
        
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        """
        try:
            existing_dates = []
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            for file_path in self.downloads_path.glob("test_*.html"):
                filename = file_path.name
                match = re.match(self.filename_pattern, filename)
                
                if match:
                    year, month, day = match.groups()
                    date_str = f"{year}-{month}-{day}"
                    existing_dates.append(date_str)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(existing_dates)} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
            return existing_dates
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫: {e}")
            return []
    
    def convert_date_format(self, date_str: str) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD-MM-YYYY –≤ YYYY-MM-DD
        
        Args:
            date_str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY
            
        Returns:
            –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        """
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É DD-MM-YYYY
            day, month, year = date_str.split('-')
            return f"{year}-{month}-{day}"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã {date_str}: {e}")
            return date_str
    
    def get_downloadable_tests(self, tests_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        
        Args:
            tests_data: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            existing_dates = self.get_existing_downloads()
            downloadable_tests = []
            
            for test in tests_data:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                test_date = self.convert_date_format(test['date'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç
                if (test['button_type'] == "TEST" and 
                    test_date not in existing_dates):
                    downloadable_tests.append({
                        **test,
                        'download_date': test_date
                    })
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(downloadable_tests)} —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return downloadable_tests
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
            return []
    
    def download_test_page(self, test_info: Dict[str, Any]) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ—Å—Ç–∞
        
        Args:
            test_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            date_str = test_info['download_date']
            original_date = test_info['date']
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ—Å—Ç –∑–∞ {original_date}...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–∞
            # –ö–Ω–æ–ø–∫–∞ Test –≤–µ–¥—ë—Ç –Ω–∞ /tests/permiso-B/online
            if test_info['button_type'] == "TEST":
                test_url = test_info['href']
                if not test_url:
                    test_url = f"{self.base_url}/tests/permiso-B/online"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–∞—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if '?' not in test_url:
                    test_url += f"?date={date_str}"
                else:
                    test_url += f"&date={date_str}"
                    
            else:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç –∑–∞ {original_date} - —Ç–∏–ø –∫–Ω–æ–ø–∫–∏: {test_info['button_type']}")
                return False
            
            logger.info(f"URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {test_url}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = self.session.get(test_url, timeout=30)
            response.raise_for_status()
            
            if response.status_code == 200:
                # –û—á–∏—â–∞–µ–º HTML –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                clean_html = self.clean_html_content(response.text)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                filename = f"test_{date_str}.html"
                file_path = self.downloads_path / filename
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(clean_html)
                
                logger.info(f"‚úÖ –¢–µ—Å—Ç –∑–∞ {original_date} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {filename}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞ –∑–∞ {original_date}: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–∞ –∑–∞ {test_info.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')}: {e}")
            return False
    
    def clean_html_content(self, html_content: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç HTML –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ª–∏—à–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        Args:
            html_content: –ò—Å—Ö–æ–¥–Ω—ã–π HTML
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π HTML
        """
        try:
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for img in soup.find_all('img'):
                img.decompose()
            
            # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
            for script in soup.find_all('script'):
                script.decompose()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∏–ª–∏
            for style in soup.find_all('style'):
                style.decompose()
            
            # –£–¥–∞–ª—è–µ–º iframe
            for iframe in soup.find_all('iframe'):
                iframe.decompose()
            
            # –£–¥–∞–ª—è–µ–º canvas
            for canvas in soup.find_all('canvas'):
                canvas.decompose()
            
            # –£–¥–∞–ª—è–µ–º svg
            for svg in soup.find_all('svg'):
                svg.decompose()
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            for comment in soup.find_all(string=lambda text: isinstance(text, str) and text.strip().startswith('<!--')):
                comment.extract()
            
            logger.info("‚úÖ HTML –æ—á–∏—â–µ–Ω –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ª–∏—à–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return str(soup)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ HTML: {e}")
            return html_content
    
    def download_all_available_tests(self, tests_data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
        
        Args:
            tests_data: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            logger.info("–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            downloadable_tests = self.get_downloadable_tests(tests_data)
            
            if not downloadable_tests:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                return {
                    'total_tests': len(tests_data),
                    'existing_tests': len(self.get_existing_downloads()),
                    'new_tests': 0,
                    'downloaded_tests': 0,
                    'failed_tests': 0
                }
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
            downloaded_count = 0
            failed_count = 0
            
            for test in downloadable_tests:
                if self.download_test_page(test):
                    downloaded_count += 1
                else:
                    failed_count += 1
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            report = {
                'total_tests': len(tests_data),
                'existing_tests': len(self.get_existing_downloads()),
                'new_tests': len(downloadable_tests),
                'downloaded_tests': downloaded_count,
                'failed_tests': failed_count,
                'downloadable_tests': downloadable_tests
            }
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {downloaded_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –Ω–µ—É–¥–∞—á–Ω–æ")
            return report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
            return {}
    
    def print_download_report(self, tests_data: List[Dict[str, Any]]):
        """
        –í—ã–≤–æ–¥–∏—Ç –æ—Ç—á—ë—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        
        Args:
            tests_data: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        """
        try:
            existing_dates = self.get_existing_downloads()
            downloadable_tests = self.get_downloadable_tests(tests_data)
            
            print("\n" + "="*60)
            print("üìä –û–¢–ß–Å–¢ –û –ó–ê–ì–†–£–ó–ö–ï –¢–ï–°–¢–û–í")
            print("="*60)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            test_tests = [t for t in tests_data if t['button_type'] == "TEST"]
            premium_tests = [t for t in tests_data if t['button_type'] == "Premium"]
            
            print(f"üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(tests_data)}")
            print(f"üîò –¢–µ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π TEST: {len(test_tests)}")
            print(f"‚≠ê –¢–µ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π Premium: {len(premium_tests)}")
            print(f"üìÅ –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(existing_dates)}")
            print(f"üöÄ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {len(downloadable_tests)}")
            
            if existing_dates:
                print(f"\nüìÖ –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã:")
                for date in sorted(existing_dates)[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"  ‚úÖ {date}")
                if len(existing_dates) > 10:
                    print(f"  ... –∏ –µ—â—ë {len(existing_dates) - 10}")
            
            if downloadable_tests:
                print(f"\nüéØ –¢–µ—Å—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:")
                for test in downloadable_tests[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"  üîò {test['date']} -> {test['download_date']}")
                if len(downloadable_tests) > 10:
                    print(f"  ... –∏ –µ—â—ë {len(downloadable_tests) - 10}")
                
                print(f"\nüí° –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É {len(downloadable_tests)} —Ç–µ—Å—Ç–æ–≤...")
            else:
                print(f"\n‚ÑπÔ∏è –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
    
    def get_test_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–∞–º
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            existing_dates = self.get_existing_downloads()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–∞–º
            stats = {
                'total_files': len(existing_dates),
                'oldest_date': min(existing_dates) if existing_dates else None,
                'newest_date': max(existing_dates) if existing_dates else None,
                'date_range': None
            }
            
            if stats['oldest_date'] and stats['newest_date']:
                oldest = datetime.strptime(stats['oldest_date'], '%Y-%m-%d')
                newest = datetime.strptime(stats['newest_date'], '%Y-%m-%d')
                stats['date_range'] = (newest - oldest).days + 1
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ OpenAI API.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API, –ª–∏–º–∏—Ç—ã –∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞.
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from dotenv import load_dotenv
from openai import OpenAI
import json

def test_openai_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å OpenAI API."""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key or not api_key.strip():
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üìã –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   OPENAI_API_KEY=your_api_key_here")
        return False
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∫–∞–∑–∞
    masked_key = f"{api_key[:8]}...{api_key[-4:]}" if len(api_key) > 12 else "***"
    print(f"üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {masked_key}")
    
    try:
        client = OpenAI(api_key=api_key)
        print("üîå –ö–ª–∏–µ–Ω—Ç OpenAI —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        print("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–µ—à—ë–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": "Say 'Hello' in Spanish."}
            ],
            max_tokens=10
        )
        
        print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üì® –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response.choices[0].message.content}")
        print(f"üè∑Ô∏è  –ú–æ–¥–µ–ª—å: {response.model}")
        print(f"üé´ –¢–æ–∫–µ–Ω—ã: {response.usage.total_tokens}")
        
        return True
        
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API:")
        print(f"   {error_msg}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if "insufficient_quota" in error_msg.lower():
            print("\nüí∞ –î–ò–ê–ì–ù–û–ó: –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI")
            print("üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. –ò—Å—á–µ—Ä–ø–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç ($5)")
            print("   2. –ò—Å—á–µ—Ä–ø–∞–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")
            print("   3. –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –∫–∞—Ä—Ç–æ–π")
            print("\nüîß –ß—Ç–æ –¥–µ–ª–∞—Ç—å:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å: https://platform.openai.com/account/billing")
            print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã: https://platform.openai.com/account/rate-limits")
            print("   3. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω")
            
        elif "429" in error_msg:
            print("\n‚è±Ô∏è  –î–ò–ê–ì–ù–û–ó: Rate limiting")
            print("üìã –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è")
            print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
            
        elif "401" in error_msg or "invalid" in error_msg.lower():
            print("\nüîê –î–ò–ê–ì–ù–û–ó: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –≤ .env —Ñ–∞–π–ª–µ")
            
        else:
            print(f"\nü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ OpenAI")
            
        return False

def check_model_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        return
        
    try:
        client = OpenAI(api_key=api_key)
        print("\nüß† –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π...")
        
        models_to_test = ["gpt-3.5-turbo", "gpt-4", "gpt-4-turbo"]
        
        for model in models_to_test:
            try:
                response = client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": "Hi"}],
                    max_tokens=1
                )
                print(f"   ‚úÖ {model}: –¥–æ—Å—Ç—É–ø–Ω–∞")
            except Exception as e:
                if "insufficient_quota" in str(e).lower():
                    print(f"   üí∞ {model}: –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞")
                elif "does not exist" in str(e).lower():
                    print(f"   ‚ùå {model}: –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    print(f"   ‚ö†Ô∏è  {model}: {str(e)[:50]}...")
                    
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª–∏: {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API\n")
    
    if test_openai_api():
        check_model_availability()
        print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print("\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        sys.exit(1)

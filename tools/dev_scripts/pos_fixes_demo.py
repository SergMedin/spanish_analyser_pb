"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π POS —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—É spacy-pipeline.mdc

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞ Gender/Word –¥–ª—è antig√ºedad
2. –ö–æ—Ä—Ä–µ–∫—Ü–∏—é PROPN‚ÜíNOUN
3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é SYM –¥–ª—è –±—É–∫–≤–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
4. –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å POS –ø–µ—Ä–µ–≤–æ–¥–æ–≤
"""

import tempfile
import pandas as pd
from spanish_analyser.word_analyzer import WordAnalyzer


def main():
    print("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π POS —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—É spacy-pipeline.mdc")
    print("=" * 70)
    
    analyzer = WordAnalyzer()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–±–ª–µ–º–∞ antig√ºedad –∏–∑ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    print("\nüìù –¢–µ—Å—Ç 1: –†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω Gender/Word –¥–ª—è antig√ºedad")
    print("-" * 50)
    
    text_antiguedad = """
    La antig√ºedad es importante para la historia. 
    Antig√ºedad significa tiempo pasado.
    En la antig√ºedad romana hab√≠a muchas tradiciones.
    """
    
    analyzer.add_words_from_text(text_antiguedad)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—ã
    freq_keys = [key for key in analyzer.word_frequencies.keys() if 'antig√ºedad' in key]
    print(f"–ö–ª—é—á–∏ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è antig√ºedad: {freq_keys}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º Excel
    with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
        analyzer.export_to_excel(tmp.name)
        df = pd.read_excel(tmp.name)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å antig√ºedad
        antiguedad_rows = df[df['Word'].str.contains('antig√ºedad', na=False)]
        
        print("\nüìä –°—Ç—Ä–æ–∫–∏ Excel –¥–ª—è antig√ºedad:")
        if len(antiguedad_rows) > 0:
            for _, row in antiguedad_rows.iterrows():
                word = row['Word']
                gender = row['Gender']
                pos = row['Part of Speech']
                
                # –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –ü–û –ü–†–ê–í–ò–õ–£
                expected_gender = "Fem" if word.startswith("la ") else "Masc" if word.startswith("el ") else "-"
                status = "‚úÖ" if gender == expected_gender else "‚ùå"
                
                print(f"  {status} Word: '{word}' | Gender: '{gender}' | POS: '{pos}'")
                print(f"      –û–∂–∏–¥–∞–µ–º—ã–π Gender: '{expected_gender}' | –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {'–î–ê' if gender == expected_gender else '–ù–ï–¢'}")
        else:
            print("  ‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä–æ–∫ —Å antig√ºedad –≤ Excel (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–æ–≤–æ –≤ Anki)")
    
    # –¢–µ—Å—Ç 2: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è PROPN‚ÜíNOUN
    print("\nüìù –¢–µ—Å—Ç 2: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è PROPN‚ÜíNOUN")
    print("-" * 50)
    
    analyzer2 = WordAnalyzer()
    text_propn = "Tecnolog√≠a es importante. La tecnolog√≠a moderna avanza r√°pido."
    analyzer2.add_words_from_text(text_propn)
    
    tech_keys = [key for key in analyzer2.word_frequencies.keys() if 'tecnolog√≠a' in key]
    print(f"–ö–ª—é—á–∏ –¥–ª—è tecnolog√≠a: {tech_keys}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∫–ª—é—á–µ–π —Å "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–º—è"
    propn_keys = [key for key in tech_keys if "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–º—è" in key]
    if len(propn_keys) == 0:
        print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è PROPN‚ÜíNOUN —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–µ—Ç –∫–ª—é—á–µ–π —Å '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–º—è'")
    else:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏ —Å '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–º—è': {propn_keys}")
    
    # –¢–µ—Å—Ç 3: –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    print("\nüìù –¢–µ—Å—Ç 3: –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ X/SYM)")
    print("-" * 50)
    
    analyzer3 = WordAnalyzer()
    # –¢–µ–∫—Å—Ç —Å –≤—ã—Å–æ–∫–æ–π –¥–æ–ª–µ–π —Å–∏–º–≤–æ–ª–æ–≤
    text_symbols = "Texto normal pero ### @@@ %%% –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ &&& $$$"
    print("–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏...")
    analyzer3.add_words_from_text(text_symbols)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤—ã—à–µ, –µ—Å–ª–∏ –µ—Å—Ç—å)")
    
    # –¢–µ—Å—Ç 4: –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ POS
    print("\nüìù –¢–µ—Å—Ç 4: –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ POS –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
    print("-" * 50)
    
    analyzer4 = WordAnalyzer()
    test_pos = ['NOUN', 'VERB', 'ADJ', 'PROPN', 'SYM']
    
    print("–ü–µ—Ä–µ–≤–æ–¥—ã POS –∏–∑ –µ–¥–∏–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:")
    for pos in test_pos:
        translation = analyzer4.pos_tagger.get_pos_tag_ru(pos)
        print(f"  {pos} ‚Üí {translation}")
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—É spacy-pipeline.mdc –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")


if __name__ == "__main__":
    main()
